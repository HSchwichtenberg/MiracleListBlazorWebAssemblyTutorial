@page "/main"
@attribute [Authorize]
<div class="row">

 <!-- ### Spalte 1: Kategorien-->
 @if (categorySet != null)
 {
  <div class="MLPanel col-xs-4 col-sm-4 col-md-3 col-lg-2 @(this.task!=null ? "hidden-sm hidden-xs": ""  )">
   <!-- ---------- Überschrift Spalte 1-->
   <h4> @(categorySet.Count()) <span>Categories</span></h4>
   <!-- ---------- neue Kategorie eingeben-->
   <input name="newCategoryName" type="text" class="form-control" @bind="newCategoryName" @onkeyup="(e) => NewCategory_Keyup(e)" placeholder="new Category..." />
   <!-- ---------- Kategorieliste ausgeben-->

   <ol class="list-group scroll">
    @foreach (var c in categorySet)
    {
     <li class="list-group-item" @onclick="() => ShowTaskSet(c)" title="Task Category #@c.CategoryID" style="Background-color:@(this.category != null && c.CategoryID == this.category.CategoryID ? "#E0EEFA" : "white")">
      @c.Name
      <span id="Remove" style="float:right;" class="glyphicon glyphicon-remove-circle" @onclick="() => RemoveCategory(c)"></span>
     </li>
    }
   </ol>
  </div>

  <!-- ### Spalte 2: Aufgabenliste-->
  <div class="MLPanel @(this.task==null ? "col-xs-8 col-sm-8 col-md-9 col-lg-10 ": "hidden-xs col-sm-6 col-md-5 col-lg-6"  )">
   <!-- ---------- Überschrift Spalte 2-->
   <h4 id="TaskHeadline">@(taskSet == null ? 0 : taskSet.Count()) <span>Tasks in</span> @category?.Name</h4>
   <!-- ---------- neue Aufgaben eingeben-->
   <input name="newTaskTitle" type="text" class="form-control" disabled="@(this.category == null)" @bind="newTaskTitle" @onkeyup="(e) => NewTask_Keyup(e)" placeholder="new Task..." />
   <!-- ---------- Aufgabenliste ausgeben-->
   @if (taskSet != null)
   {<ol id="TaskSet" class="list-group scroll">
     @foreach (var t in taskSet)
     {
      <li @key="t" class="list-group-item" @onclick="() => ShowTaskDetail(t)" style="Background-color: @((t.TaskID == this.task?.TaskID) ? "#E0EEFA" : "white")" title="Task #@t.TaskID">
       <span id="Remove" style="float:right;" class="glyphicon glyphicon-remove-circle" @onclick="() => RemoveTask(t)"></span>

       <input type="checkbox" name="@("done" + t.TaskID)" id="@("done" + t.TaskID)" checked="@t.Done" class=" MLcheckbox" @onclick:stopPropagation="true" @onchange=@(async(eventArgs) => { t.Done = (bool)eventArgs.Value; await proxy.ChangeTaskAsync(t, am.Token); await hubConnection.SendAsync("TaskListUpdate", am.Token, this.category.CategoryID); }) />

       <b>@t.Title</b>

       @if (t.Due.HasValue)
        if (t.Due.Value < DateTime.Now)
        {
         <div style="color:red">Due since @t.Due.Value.ToShortDateString()</div>
        }
        else
        {
         <div>Due at @t.Due.Value.ToShortDateString()</div>
        }
      </li>
     }
    </ol>
   }
  </div>
 }

 <!-- ### Spalte 3: Aufgabendetails-->
 @if (task != null)
 {
  <div class="MLPanel col-xs-12 col-sm-6 col-md-4 col-lg-4">
   <TaskEdit Task="@task" TaskHasChanged="@ReloadTasks"></TaskEdit>
  </div>
 }

</div>